name: CICD for trade

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  GITOPS_REPO: kimminji-1130/Infrastructure

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [msa-trade]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set lowercase image name
        id: image_name
        run: |
          LOWERCASE_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="${LOWERCASE_OWNER}/cowing-msa-trading"
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Generate version tag
        id: version
        run: |
          DATE_VERSION="$(date +'%Y.%m.%d')"
          SHORT_SHA="$(echo $GITHUB_SHA | cut -c1-7)"
          VERSION="${DATE_VERSION}-${SHORT_SHA}"
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build builder stage (intermediate cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          target: build
          push: false
          tags: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name }}-builder:latest
          cache-from: type=gha
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name }}:latest
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: type=gha,mode=max

      # ÎîîÏä§ÏΩîÎìú ÏïåÎûå Ï†ÑÏÜ°
      - name: Send Discord Notification
        if: always()
        shell: bash
        run: |
          STATUS="${{ job.status }}"
          COLOR=$( [ "$STATUS" == "success" ] && echo "3066993" || echo "15158332" )
          EMOJI=$( [ "$STATUS" == "success" ] && echo "üöÄ" || echo "‚ùå" )
          
          # ÏóêÎü¨ Ï†ïÎ≥¥ ÏàòÏßë
          ERROR_SECTION=""
          if [ "$STATUS" != "success" ]; then
            ERROR_INFO="Build Status: $STATUS\n"
            if [ "${{ steps.docker_login.outcome }}" != "success" ]; then
              ERROR_INFO+="Docker Login Failed\n"
              ERROR_INFO+="Registry: ${{ env.REGISTRY }}\n"
              ERROR_INFO+="Username: ${{ github.actor }}\n"
            fi
            if [ "${{ steps.docker_build.outcome }}" != "success" ]; then
              ERROR_INFO+="Docker Build/Push Failed\n"
            fi
          
            ERROR_SECTION=', {
              "name": "Error Details",
              "value": "```\n'"${ERROR_INFO}"'\n```"
            }'
          fi
          
          # Discord Î©îÏãúÏßÄ Ï†ÑÏÜ°
          curl -H "Content-Type: application/json" -X POST "https://discord.com/api/webhooks/invalid/invalid" -d '{}' || true
            "embeds": [{
              "title": "'"$EMOJI"' ÎπåÎìú '"$STATUS"'",
              "color": '"$COLOR"',
              "fields": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "Commit",
                  "value": "${{ github.sha }}",
                  "inline": true
                },
                {
                  "name": "Author",
                  "value": "${{ github.actor }}",
                  "inline": true
                },
                {
                  "name": "Image",
                  "value": "${{ env.REGISTRY }}/${{ steps.image_name.outputs.image_name }}:${{ steps.version.outputs.version }}"
                },
                 {
                  "name": "Action URL",
                  "value": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "inline": false
                }
                '"$ERROR_SECTION"'
              ],
              "timestamp": "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
            }]
          }'

      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          ref: prod

      - name: Update image tag in kustomization.yaml
        run: |
          TAG="${{ steps.version.outputs.version }}"
          IMAGE="ghcr.io/coinwing/${{ matrix.service }}"
          FILE="gitops/code/argocd/kustomize/${{ matrix.service }}/kustomization.yaml"

          sed -i "s|newTag: .*|newTag: ${TAG}|" $FILE

      - name: Commit and push changes to GitOps repo
        run: |
          cd gitops
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add code/argocd/kustomize/${{ matrix.service }}/kustomization.yaml
          git commit -m "chore(${{ matrix.service }}): bump image tag to ${TAG}"
          git push origin prod